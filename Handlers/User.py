# –ó—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –º–æ–≤—É, —Ç–æ–±—Ç–æ —â–æ–± –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤–Ω–æ—Å–∏–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —Å–ª–æ–≤–æ, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–æ—Å–∏—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ
from loader import dp, types, bot
from Data.config import api_token
import random
import asyncio
import logging
import time
import Functions.DB, Functions.Functions
from stickers.stickers import stickers_start, stickers_money, stickers_cute, stickers_thank, stickers_bye
from oxford import phonetic_transcription
from States.user import registration, nextmessage
from aiogram.dispatcher import FSMContext

# Set up logging
logging.basicConfig(level=logging.INFO)

# bot = Bot(token=api_token)

number_sec_2_hours, number_sec_4_hours, number_sec_day, number_sec_week, number_sec_month = 10, 20, 30, 40, 50  # test
# number_sec_2_hours, number_sec_4_hours, number_sec_day, number_sec_week, number_sec_month = 7200, 14400, 86400, 604800, 2592000
# number_sec_day, number_sec_3_days, number_sec_week, number_sec_half_month, number_sec_month = 86400, 3*86400, 7*86400, 15*86400, 31*86400 # –∑–∞ —Å–ª–æ–≤–∞–º–∏ –ß–µ—Ä–Ω–µ–Ω–∫–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å, —â–æ —Ü–µ –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∏–≤—á–∏—Ç–∏ —Å–ª–æ–≤–æ –ª–µ–¥—å –Ω–µ –Ω–∞–∑–∞–≤–∂–¥–∏

word_id = 0
id_for_start = 0
indx = 0
flag_new_word = False
flag_first_client = False
number_row = 0
name_button1 = ''
name_button2 = '–ó–∞—Ä–æ–±–∏—Ç–∏ –≥—Ä–æ—à—ñ'
user_ask_2 = False
temporary = ''
text_for_callmessage = 'here must be text_for_callmessage'


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    global flag_first_client, id_for_start
    id_for_start = message.from_user.id
    print("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {0.first_name} –Ω–∞—Ç–∏—Å–Ω—É–≤ start".format(message.from_user))
    count_rows_with_value = Functions.DB.count_rows_with_value(message.from_user.id)
    if count_rows_with_value > 0:
        await message.answer('–†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏.')
        await Functions.Functions.send_random_sticker(bot, id_for_start, stickers_start)
    else:
        flag_first_client = True
        await Functions.Functions.send_random_sticker(bot, id_for_start, stickers_start)
        markup = types.InlineKeyboardMarkup(row_width=2)
        item4 = [types.InlineKeyboardButton("–¢–∞–∫", callback_data='yes_helper'),
                 types.InlineKeyboardButton("–ù—ñ", callback_data='no_helper')]
        markup.add(*item4)
        await bot.send_message(message.chat.id,
                               '–î–æ–∑–≤–æ–ª—é —Å–æ–±—ñ –ø—Ä–∏–ø—É—Å—Ç–∏—Ç–∏, —â–æ —Ç–∏ –±–∞–∂–∞—î—à –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–≥–ª—ñ–π—Å—å–∫—É. –•–æ—á–µ—à, —â–æ–± —è –±—É–≤ —Ç–≤–æ—ó–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º?',
                               reply_markup=markup)
        # keyboard
        # markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        # items = [types.KeyboardButton("–ó–∞—Ä–æ–±–∏—Ç–∏ –≥—Ä–æ—à—ñ"), types.KeyboardButton("–î—Ä—É–≥–∞ –∫–Ω–æ–ø–∫–∞")]
        # markup.add(*items)

        # await bot.send_message(message.chat.id,
        #                        "–î–æ–∑–≤–æ–ª—é —Å–æ–±—ñ –ø—Ä–∏–ø—É—Å—Ç–∏—Ç–∏, —â–æ —Ç–∏ –±–∞–∂–∞—î—à –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–≥–ª—ñ–π—Å—å–∫—É. –¢–æ–¥—ñ —Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ. –•–æ—á–µ—à, —â–æ–± —è –±—É–≤ —Ç–≤–æ—ó–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º?",
        #                        parse_mode='html', reply_markup=markup)
        #
        # keyboard
        # markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        # items = [types.KeyboardButton("–ú–∞—é —Å–ª–æ–≤–æ"), types.KeyboardButton("–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ")]
        # markup.add(*items)

        # await bot.send_sticker(message.chat.id, sti)
        # await bot.send_message(message.chat.id,
        #                        "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫, —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∑–±—ñ–ª—å—à–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏–π –∑–∞–ø–∞—Å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏.",
        #                        parse_mode='html', reply_markup=markup)
        # await asyncio.sleep(1)
        # await bot.send_message(message.chat.id,
        #                        '–ó—ñ –º–Ω–æ—é –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ª–µ–≥–∫–æ.\n–ù–∞—Ç—Ä–∞–ø–∏–≤—à–∏ –Ω–∞ —Å–ª–æ–≤–æ, —è–∫–µ —Ö–æ—á–µ—à –≤–∏–≤—á–∏—Ç–∏, —Ç–∏—Å–Ω–∏ <b>"–ú–∞—é —Å–ª–æ–≤–æ"</b>.\n–Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–æ, —è–∫–µ –±–∞–∂–∞—î—à –≤–∏–≤—á–∏—Ç–∏, —Ç–∏—Å–Ω–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>.',
        #                        parse_mode='html', reply_markup=markup)
        # await asyncio.sleep(2)
        # await bot.send_message(message.chat.id, '–í–æ–Ω–∏ –∑–Ω–∏–∑—É, —è–∫—â–æ —â–æ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è', parse_mode='html', reply_markup=markup)


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    print("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {0.first_name} –Ω–∞—Ç–∏—Å–Ω—É–≤ help".format(message.from_user))
    await message.answer('–¢—É—Ç –±—É–¥–µ –¥–æ–≤—ñ–¥–∫–∞')


@dp.message_handler(text='–ú–∞—é —Å–ª–æ–≤–æ')
async def admin(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é')
    await registration.eng_word.set()


@dp.message_handler(state=registration.eng_word)
async def first(message: types.Message, state: FSMContext):
    global user_ask_2, temporary
    # Save new English word and ask for Ukrainian word
    transcription = phonetic_transcription(message.text.lower())
    print('–ó–∞–¥—ñ—è–Ω–æ –±–ª–æ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ —Å–ª–æ–≤–∞')
    await state.update_data(eng_word=message.text.lower(), transcription=transcription)
    print(transcription)
    if transcription == None:
        markup = types.InlineKeyboardMarkup(row_width=2)
        item3 = [types.InlineKeyboardButton("–Ü—Å–Ω—É—î", callback_data='exist'),
                 types.InlineKeyboardButton("–ù–µ —ñ—Å–Ω—É—î", callback_data='no_exist')]
        markup.add(*item3)
        # await bot.send_message(message.chat.id, '–†–∞–¥–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ç–∞–∫–µ —Å–ª–æ–≤–æ —Ç–æ—á–Ω–æ —ñ—Å–Ω—É—î.', reply_markup=markup)
        print(user_ask_2)
        if not user_ask_2:
            temporary = message.text.lower()
            await message.answer('–†–∞–¥–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ç–∞–∫–µ —Å–ª–æ–≤–æ —Ç–æ—á–Ω–æ —ñ—Å–Ω—É—î —ñ –ª–∏—à–µ –ø–æ—Ç—ñ–º –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –º–µ–Ω–µ.')
            user_ask_2 = True
            await state.finish()
        else:
            await message.answer('–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é')
            await registration.ua_word.set()
    else:
        await message.answer('–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é')
        await registration.ua_word.set()


@dp.message_handler(state=registration.ua_word)
async def second(message: types.Message, state: FSMContext):
    global flag_first_client
    if message.text == '–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ':
        await bot.send_message(message.chat.id,
                               '–¢—Ä–µ–±–∞ –≤–≤–æ–¥–∏—Ç–∏ —Å–ª–æ–≤–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –∞ –Ω–µ —Ç–∏—Å–Ω—É—Ç–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>! –ü–æ—á–∏–Ω–∞–π —Å–ø–æ—á–∞—Ç–∫—É, —Ç–∏—Å–Ω–∏ <b>"–ú–∞—é —Å–ª–æ–≤–æ"</b>.')
    else:
        date = time.time()
        data = await state.get_data()
        # Check if the word already exists in the database
        if Functions.DB.check_row_with_two_values('user_id', message.from_user.id, 'eng_word',
                                                  data['eng_word']):  # —è–∫—â–æ —Å–ª–æ–≤–æ –≤–∂–µ —î –≤ –±–∞–∑—ñ
            # Handle existing word scenario
            markup = types.InlineKeyboardMarkup(row_width=2)
            item2 = [types.InlineKeyboardButton("–ë–∞–∂–∞—é", callback_data='yes'),
                     types.InlineKeyboardButton("–ù–µ –±–∞–∂–∞—é", callback_data='no'),
                     types.InlineKeyboardButton("–ü–æ–∫–∞–∂–∏", callback_data='show'),
                     types.InlineKeyboardButton('–©–æ —Ç–∞–∫–µ "–æ–Ω–æ–≤–∏—Ç–∏"?', callback_data='info_update')]
            markup.add(*item2)
            await bot.send_message(message.chat.id, '–¢–∞–∫–µ —Å–ª–æ–≤–æ —É –Ω–∞—Å –≤–∂–µ —î. –ë–∞–∂–∞—î—à –æ–Ω–æ–≤–∏—Ç–∏?',
                                   reply_markup=markup)
        else:
            Functions.DB.insert_7_values(message.from_user.id, data['eng_word'], message.text.lower(),
                                         data['transcription'],
                                         date, date + number_sec_2_hours, 1)
        print('–ó–∞–¥—ñ—è–Ω–æ –±–ª–æ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Å–ª–æ–≤–∞')
        count_rows_with_value = Functions.DB.count_rows_with_value(message.from_user.id)
        one_date = Functions.DB.get_one_value('date', 'user_id', message.from_user.id)
        if count_rows_with_value == 1 and one_date != 1:
            Functions.DB.update_one_value(word_id, 'check_date', date + 10)
            sti = open('stickers/AnimatedSticker_cup.tgs', 'rb')
            await bot.send_message(message.chat.id, '–í—ñ—Ç–∞—é!!! –ü–µ—Ä—à–µ —Å–ª–æ–≤–æ –æ—Ç—Ä–∏–º–∞–Ω–æ.')
            await bot.send_sticker(message.chat.id, sti)
            await asyncio.sleep(1)  # Asynchronous delay
            await bot.send_message(message.chat.id, '–û—Ü–µ —Ç–∞–∫ –ø–æ—á–∞—Ç–æ–∫. –Ø –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ —Ç–µ–±–µ! ü§©')
            await asyncio.sleep(2)  # Asynchronous delay
            await bot.send_message(message.chat.id,
                                   '–¢–µ–ø–µ—Ä —Ç–∏ –≤–∂–µ –∑–Ω–∞—î—à, —è–∫ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –∫–Ω–æ–ø–∫–æ—é <b>"–ú–∞—é —Å–ª–æ–≤–æ"</b>',
                                   parse_mode='html')
            flag_first_client = True  # –¥–æ–ø–æ–º–∞–≥–∞—î –Ω–æ–≤–æ–º—É –∫–ª—ñ—î–Ω—Ç—É –∑—Ä–æ–∑—É–º—ñ—Ç–∏, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç–∏—Å–Ω—É—Ç–∏ "–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"
            await asyncio.sleep(4)  # Asynchronous delay
            await bot.send_message(message.chat.id,
                                   '–ê –∑–∞—Ä–∞–∑ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º —ñ–Ω—à–æ—ó –∫–Ω–æ–ø–∫–∏. –¢–∏—Å–Ω–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>!',
                                   parse_mode='html')
    await state.finish()


@dp.message_handler(text='–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ')
async def process_user_words(message: types.Message, state: FSMContext):
    global flag_first_client, text_for_callmessage, number_row
    # await state.finish()
    flag = False  # –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–ª—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –ø–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É
    number_rows = Functions.DB.count_rows_in_database() + 1
    for number in range(1, int(number_rows)):  # –ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –∫-—Å—Ç—å —Ä—è–¥–∫—ñ–≤
        number_row = number
        word_id, user_id, eng_word, ua_word, transcription, time_now, digit, check_date, odds, level, score, column1, column2 = await Functions.Functions.read_time_data(
            number)
        print(level, odds, user_id, flag_first_client)

        if level == 1 and odds > 10 and user_id == message.from_user.id and flag_first_client:
            flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
                                                                                         transcription, bot,
                                                                                         number, message, level,
                                                                                         time_now)
            Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_2_hours)
            break

        if level == 1 and odds > number_sec_2_hours and user_id == message.from_user.id:
            flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
                                                                                         transcription, bot,
                                                                                         number, message, level,
                                                                                         time_now)
            Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_2_hours)
            break

        elif level == 2 and odds > number_sec_4_hours and user_id == message.from_user.id:
            flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
                                                                                         transcription, bot,
                                                                                         number, message, level,
                                                                                         time_now)
            Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_day)
            break

        elif level == 3 and odds > number_sec_day and user_id == message.from_user.id:
            flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
                                                                                         transcription, bot,
                                                                                         number, message, level,
                                                                                         time_now)
            Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_week)
            break

        elif level == 4 and odds > number_sec_week and user_id == message.from_user.id:
            flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
                                                                                         transcription, bot,
                                                                                         number, message, level,
                                                                                         time_now)
            Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_month)
            break

        elif level == 5 and odds > number_sec_month and user_id == message.from_user.id:
            flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
                                                                                         transcription, bot,
                                                                                         number, message, level,
                                                                                         time_now)
            Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_month)
            break

    if flag == False:
        await bot.send_message(message.chat.id,
                               '–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞ —Å–ª—ñ–≤, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ —Ç–æ–±–æ—é. –ü—Ä–∏—Ö–æ–¥—å –ø—ñ–∑–Ω—ñ—à–µ.')
        sti = open(f'stickers/AnimatedSticker_gorilla.tgs', 'rb')
        await bot.send_sticker(message.chat.id, sti)
    await state.finish()
    # await registration.name.set()


@dp.message_handler(content_types=types.ContentType.TEXT)
async def process_just_words(message: types.Message):
    await bot.send_message(message.chat.id,
                           '–î–ª—è —Ç–æ–≥–æ, —â–æ–± —è –ø—Ä–∏–π–Ω—è–≤ —Å–ª–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± —Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—É–≤ <b>"–ú–∞—é —Å–ª–æ–≤–æ"</b>, –∞ –ø—ñ—Å–ª—è —Ç–æ–≥–æ –Ω–∞–ø–∏—Å–∞–≤ —Å–ª–æ–≤–æ',
                           parse_mode='html')


@dp.callback_query_handler(lambda c: c.data == 'yes_helper')
async def process_callback_0(callback_query: types.CallbackQuery):
    # Send another message with the "Go on" button when the user presses it
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("Go on", callback_data="go_on"))

    response_message = [
        '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—à—É —É –Ω–∞—à —Å–≤—ñ—Ç!',
        '–î—è–∫—É—é –∑–∞ –¥–æ–≤—ñ—Ä—É!'
    ]

    await bot.send_message(
        callback_query.from_user.id,
        response_message[0],
    )

    await Functions.Functions.send_random_sticker(bot, id_for_start, stickers_thank)
    await bot.send_message(
        callback_query.from_user.id,
        response_message[1],
    )

    # Remove the inline keyboard markup
    await bot.delete_message(
        callback_query.from_user.id,
        callback_query.message.message_id,
    )

    response_message = '–ú–æ—ó –ø–æ—Å–ª—É–≥–∏ –∫–æ—à—Ç—É—é—Ç—å 5 *–ª–µ–∫—Å–∏–∫—Ä–æ–Ω* –Ω–∞ –¥–µ–Ω—å.'
    await asyncio.sleep(2)  # Asynchronous delay

    await bot.send_message(
        callback_query.from_user.id,
        response_message,
        reply_markup=markup,
        parse_mode='Markdown',
    )

    # Answer the callback query to remove the "Go on" button
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'go_on')
async def process_callback(callback_query: types.CallbackQuery):
    global indx
    # Send another message with the "Go on" button when the user presses it
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("Go on", callback_data="go_on"))

    # Responses message
    responses = [
        "–ú–æ—ó –ø–æ—Å–ª—É–≥–∏ –∫–æ—à—Ç—É—é—Ç—å 5 *–ª–µ–∫—Å–∏–∫—Ä–æ–Ω* –Ω–∞ –¥–µ–Ω—å.",
        "*–õ–µ–∫—Å–∏–∫—Ä–æ–Ω–∏* - —Ü–µ –Ω–∞—à–∞ –≤–∞–ª—é—Ç–∞.",
        "–î–æ —Ä–µ—á—ñ, –Ω–∞—à–∞ –¥–µ—Ä–∂–∞–≤–∞ –≤–∏–¥—ñ–ª—è—î –ø–µ–≤–Ω—É —Å—É–º—É –ª–µ–∫—Å–∏–∫—Ä–æ–Ω –∫–æ–∂–Ω–æ–º—É, —Ö—Ç–æ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —Ä—É—Ö–∞—Ç–∏—Å—è –≤ –Ω–∞–ø—Ä—è–º–∫—É —Ä–æ–∑–≤–∏—Ç–∫—É. –¢–∞–∫—ñ, —è–∫ –¢–∏, –¥—É–∂–µ –≤–∞–∂–ª–∏–≤—ñ –¥–ª—è –Ω–∞—Å.",
        "–ü—Ä–æ —Ü–µ –ø–æ—Ç—ñ–º –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–æ–∑–ø–æ–≤—ñ–º. –ê –∑–∞—Ä–∞–∑ –≤–≤–µ–¥—É —Ç–µ–±–µ –≤ –∫—É—Ä—Å —Å–ø—Ä–∞–≤. –Ü –Ω–µ –∑–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥–∏ –Ω–∞ –º—ñ–π –≤–∏–≥–ª—è–¥.",
        "–ú–∏, *–º–æ—Ä—Ñ—ñ—Ç–∏*, –º–æ–∂–µ–º–æ –ø—Ä–∏–π–º–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π –≤–∏–≥–ª—è–¥, —è–∫–∏–π –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–æ –∑–∞–±–∞–∂–∞—î–º–æ.",
    ]

    response_message = responses[indx]

    if indx < 2:
        await bot.send_message(
            callback_query.from_user.id,
            response_message,
            parse_mode='Markdown',
        )
    elif indx == 2:
        await bot.send_message(
            callback_query.from_user.id,
            responses[3],
            parse_mode='Markdown',
        )

    # Remove the inline keyboard markup
    await bot.delete_message(
        callback_query.from_user.id,
        callback_query.message.message_id,
    )

    indx += 1
    response_message = responses[indx]

    if indx == 1:
        await bot.send_message(
            callback_query.from_user.id,
            response_message,
            reply_markup=markup,
            parse_mode='Markdown',
        )
    elif indx == 2:
        await Functions.Functions.send_random_sticker(bot, id_for_start, stickers_money)
        await bot.send_message(id_for_start, response_message, parse_mode='Markdown')
        await asyncio.sleep(4)  # Asynchronous delay
        await bot.send_message(
            callback_query.from_user.id,
            responses[3],
            reply_markup=markup,
        )
    elif indx == 3:
        await Functions.Functions.send_random_sticker(bot, id_for_start, stickers_cute)
        await bot.send_message(id_for_start, responses[4], parse_mode='Markdown')
        indx = 0

    # Answer the callback query to remove the "Go on" button
    await callback_query.answer()


@dp.callback_query_handler(lambda callback_query: True)
async def callback_handler(call: types.CallbackQuery):
    global number_row, text_for_callmessage, flag_first_client, id_for_start
    print('flag_first_client =', flag_first_client)
    count_rows_in_database = Functions.DB.count_rows_in_database()
    if count_rows_in_database > 0:
        word_id, user_id, eng_word, ua_word, transcription, time_now, digit, check_date, odds, lvl, score, column1, column2 = await Functions.Functions.read_time_data(
            number_row)

    if call.message:
        if call.data == 'good':
            Functions.DB.update_one_value(number_row, 'level', lvl + 1)  # –±–æ—Ç –∑–±—ñ–ª—å—à—É—î —Ä—ñ–≤–µ–Ω—å –Ω–∞ –æ–¥–∏–Ω–∏—Ü—é
            if lvl == 5:
                Functions.DB.update_date_lvl(number_row, time_now, lvl)  # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤—É –¥–∞—Ç—É —ñ —Ñ—ñ–∫—Å—É—î —Ä—ñ–≤–µ–Ω—å 5
        elif call.data == 'bad':
            Functions.DB.update_date_lvl(number_row, time_now, lvl - 1)  # –±–æ—Ç –∑–º–µ–Ω—à—É—î —Ä—ñ–≤–µ–Ω—å –Ω–∞ –æ–¥–∏–Ω–∏—Ü—é
            if lvl == 1:
                Functions.DB.update_date_lvl(number_row, time_now, lvl)  # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤—É –¥–∞—Ç—É —ñ —Ñ—ñ–∫—Å—É—î —Ä—ñ–≤–µ–Ω—å 1
        elif call.data == 'yes':
            pass
        elif call.data == 'no':
            text_for_callmessage = '–û–∫, —Ä—É—Ö–∞—î–º–æ—Å—è –¥–∞–ª—ñ.'
        elif call.data == 'show':
            text_for_callmessage = f'{eng_word} - {ua_word}'
        elif call.data == 'info_update':
            text_for_callmessage = '–û–Ω–æ–≤–ª–µ–Ω–Ω—è - —Ü–µ...'
        elif call.data == 'no_helper':
            text_for_callmessage = '–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!'
        # elif call.data == 'exist':
        #     text_for_callmessage = '–û–∫. –¢–æ–¥—ñ —Ç–∏—Å–Ω–∏ —â–µ —Ä–∞–∑ <b>"–ú–∞—é —Å–ª–æ–≤–æ"</b> —ñ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏ —Å–≤–æ—î —Å–ª–æ–≤–æ.'
        # elif call.data == 'no_exist':
        #     text_for_callmessage = '–†–∞–¥–∏–π –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º'

        # remove inline buttons
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text_for_callmessage, reply_markup=None)

        if flag_first_client:
            if text_for_callmessage == '–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!':
                await Functions.Functions.send_random_sticker(bot, id_for_start, stickers_bye)
            else:
                text_first = ("*–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ* —Ç–∏ –≤–∂–µ —Ç–µ–∂ –æ—Å–≤–æ—ó–≤. –ú–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è!!!\n\n"
                              "–í –ø–æ–¥–∞–ª—å—à–æ–º—É —è –±—É–¥—É –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ —Ç–µ–±–µ, –∫–æ–ª–∏ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∏–º–∏. –¢–æ–¥—ñ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –±—É–¥–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ *–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ*.\n\n"
                              "–ö–Ω–æ–ø–∫–æ—é *–ú–∞—é —Å–ª–æ–≤–æ* —Ç–∏ –π —Ç–∞–∫ –∑–Ω–∞—î—à —è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è. –¢–æ–∂ –¥–æ —Ä–æ–±–æ—Ç–∏! –ù–∞–∑–±–∏—Ä–∞–π–º–æ –Ω–∞–π–±—ñ–ª—å—à—É –∫–æ–ª–µ–∫—Ü—ñ—é —Å–ª—ñ–≤ üòâ"
                              )
                await bot.send_message(user_id, text_first, parse_mode='Markdown')
                flag_first_client = False
            # flag_first_client = False

# @dp.message_handler(content_types=types.ContentType.TEXT)
# async def process_user_words(message: types.Message):
#     # Global variables initialization
#     global flag_new_word, just_number, word_id, number_row, text_for_callmessage, flag_first_client
#
#     # Check if the message is in a private chat
#     if message.chat.type == 'private':
#         Functions.DB.create_table()
#         word_id = Functions.DB.count_rows_in_database()  # —Ä–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ
#
#         # Initialize user's data if not already done
#         if word_id == 0:
#             Functions.DB.insert_user(message.from_user.id, 1)  # –≤—Å—Ç–∞–≤–∫–∞ ID —ñ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ä—è–¥–∫–∞

# Handling different user messages
# if message.text == '–ú–∞—é —Å–ª–æ–≤–æ':
#     flag_new_word, just_number = True, 1
#     if word_id > 0:
#         Functions.DB.insert_user(message.from_user.id, word_id + 1) # –≤—Å—Ç–∞–≤–∫–∞ ID —ñ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ä—è–¥–∫–∞
#     await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é')
#
# elif message.text != '–ú–∞—é —Å–ª–æ–≤–æ' and message.text != '–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ':
#     if flag_new_word:
#         if just_number == 1:
#             # Check if the word already exists in the database
#             if Functions.DB.check_row_with_two_values('user_id', message.from_user.id, 'eng_word',
#                                                       message.text.lower()):  # —è–∫—â–æ —Å–ª–æ–≤–æ –≤–∂–µ —î –≤ –±–∞–∑—ñ
#                 Functions.DB.delete_row_with_empty_cell('level')
#                 # Handle existing word scenario
#                 markup = types.InlineKeyboardMarkup(row_width=2)
#                 item2 = [types.InlineKeyboardButton("–ë–∞–∂–∞—é", callback_data='yes'),
#                          types.InlineKeyboardButton("–ù–µ –±–∞–∂–∞—é", callback_data='no'),
#                          types.InlineKeyboardButton("–ü–æ–∫–∞–∂–∏", callback_data='show'),
#                          types.InlineKeyboardButton('–©–æ —Ç–∞–∫–µ "–æ–Ω–æ–≤–∏—Ç–∏"?', callback_data='info_update')]
#                 markup.add(*item2)
#                 await bot.send_message(message.chat.id, '–¢–∞–∫–µ —Å–ª–æ–≤–æ —É –Ω–∞—Å –≤–∂–µ —î. –ë–∞–∂–∞—î—à –æ–Ω–æ–≤–∏—Ç–∏?',
#                                        reply_markup=markup)
#             else:
#                 # Save new English word and ask for Ukrainian word
#                 transcription = phonetic_transcription(message.text.lower())
#                 word_id = Functions.DB.count_rows_in_database()
#                 Functions.DB.update_eng_word(message.text.lower(), transcription, word_id)
#                 print('–ó–∞–¥—ñ—è–Ω–æ –±–ª–æ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ —Å–ª–æ–≤–∞')
#                 just_number = 2
#                 await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é')
#
#         elif just_number == 2:
#             # Save Ukrainian word and trigger further actions
#             date = time.time()
#             Functions.DB.update(word_id, message.text.lower(), date, date + number_sec_2_hours, 1)
#             print('–ó–∞–¥—ñ—è–Ω–æ –±–ª–æ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Å–ª–æ–≤–∞')
#             count_rows_with_value = Functions.DB.count_rows_with_value(message.from_user.id)
#             one_date = Functions.DB.get_one_value('date', 'user_id', message.from_user.id)
#             if count_rows_with_value == 1 and one_date != 1:
#                 Functions.DB.update_one_value(word_id, 'check_date', date + 10)
#                 sti = open('stickers/AnimatedSticker_cup.tgs', 'rb')
#                 await bot.send_message(message.chat.id, '–í—ñ—Ç–∞—é!!! –ü–µ—Ä—à–µ —Å–ª–æ–≤–æ –æ—Ç—Ä–∏–º–∞–Ω–æ.')
#                 await bot.send_sticker(message.chat.id, sti)
#                 await asyncio.sleep(1)  # Asynchronous delay
#                 await bot.send_message(message.chat.id, '–û—Ü–µ —Ç–∞–∫ –ø–æ—á–∞—Ç–æ–∫. –Ø –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ —Ç–µ–±–µ! ü§©')
#                 await asyncio.sleep(2)  # Asynchronous delay
#                 await bot.send_message(message.chat.id,
#                                        '–¢–µ–ø–µ—Ä —Ç–∏ –≤–∂–µ –∑–Ω–∞—î—à, —è–∫ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –∫–Ω–æ–ø–∫–æ—é <b>"–ú–∞—é —Å–ª–æ–≤–æ"</b>',
#                                        parse_mode='html')
#                 flag_first_client = True  # –¥–æ–ø–æ–º–∞–≥–∞—î –Ω–æ–≤–æ–º—É –∫–ª—ñ—î–Ω—Ç—É –∑—Ä–æ–∑—É–º—ñ—Ç–∏, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç–∏—Å–Ω—É—Ç–∏ "–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"
#                 await asyncio.sleep(4)  # Asynchronous delay
#                 await bot.send_message(message.chat.id,
#                                        '–ê –∑–∞—Ä–∞–∑ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º —ñ–Ω—à–æ—ó –∫–Ω–æ–ø–∫–∏. –¢–∏—Å–Ω–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>!',
#                                        parse_mode='html')
#             flag_new_word, just_number = False, 0
#     elif flag_new_word == False:
#         print('–ó–∞–¥—ñ—è–Ω–æ –±–ª–æ–∫')
#         await bot.send_message(message.chat.id,
#                                '–î–ª—è —Ç–æ–≥–æ, —â–æ–± —è –ø—Ä–∏–π–Ω—è–≤ —Å–ª–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± —Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—É–≤ <b>"–ú–∞—é —Å–ª–æ–≤–æ"</b>, –∞ –ø—ñ—Å–ª—è —Ç–æ–≥–æ –Ω–∞–ø–∏—Å–∞–≤ —Å–ª–æ–≤–æ',
#                                parse_mode='html')

# elif message.text == '–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ' and just_number == 0:
#     flag = False  # –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–ª—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –ø–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É
#     word_id = Functions.DB.count_rows_in_database() + 1
#     for number in range(1, int(word_id)):  # –ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –∫-—Å—Ç—å —Ä—è–¥–∫—ñ–≤
#         number_row = number
#         word_id, user_id, eng_word, ua_word, transcription, time_now, digit, check_date, odds, level, score = await Functions.Functions.read_time_data(
#             number)
#
#         if level == 1 and odds > 10 and user_id == message.from_user.id and flag_first_client == True:
#             flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
#                                                                                          transcription, bot,
#                                                                                          number, message, level,
#                                                                                          time_now)
#             Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_2_hours)
#             await asyncio.sleep(3)  # Asynchronous delay
#             await bot.send_message(message.chat.id,
#                                    '<b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b> —Ç–∏ –≤–∂–µ —Ç–µ–∂ –æ—Å–≤–æ—ó–≤. –ú–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è!!!'
#                                    '\n\n–í –ø–æ–¥–∞–ª—å—à–æ–º—É —è –±—É–¥—É –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ —Ç–µ–±–µ, –∫–æ–ª–∏ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∏–º–∏. –¢–æ–¥—ñ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –±—É–¥–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>.'
#                                    '\n\n–ö–Ω–æ–ø–∫–æ—é <b>"–ú–∞—é —Å–ª–æ–≤–æ"</b> —Ç–∏ –π —Ç–∞–∫ –∑–Ω–∞—î—à —è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è. –¢–æ–∂ –¥–æ —Ä–æ–±–æ—Ç–∏! –ù–∞–∑–±–∏—Ä–∞–π–º–æ –Ω–∞–π–±—ñ–ª—å—à—É –∫–æ–ª–µ–∫—Ü—ñ—é —Å–ª—ñ–≤ üòâ',
#                                    parse_mode='html')
#             flag_first_client = False
#             # await asyncio.sleep(number_sec_2_hours)  # Asynchronous delay
#             # await bot.send_message(message.chat.id, '–ù–∞—Å—Ç–∞–≤ —á–∞—Å —Ç–∏—Å–Ω—É—Ç–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>', parse_mode='html')
#             break
#
#         if level == 1 and odds > number_sec_2_hours and user_id == message.from_user.id:
#             flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
#                                                                                          transcription, bot,
#                                                                                          number, message, level,
#                                                                                          time_now)
#             Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_2_hours)
#             # await asyncio.sleep(number_sec_2_hours)  # Asynchronous delay
#             # await bot.send_message(message.chat.id, '–ù–∞—Å—Ç–∞–≤ —á–∞—Å —Ç–∏—Å–Ω—É—Ç–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>', parse_mode='html')
#             break
#
#         elif level == 2 and odds > number_sec_4_hours and user_id == message.from_user.id:
#             flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
#                                                                                          transcription, bot,
#                                                                                          number, message, level,
#                                                                                          time_now)
#             Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_day)
#             # await asyncio.sleep(number_sec_day)  # Asynchronous delay
#             # await bot.send_message(message.chat.id, '–ù–∞—Å—Ç–∞–≤ —á–∞—Å —Ç–∏—Å–Ω—É—Ç–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>', parse_mode='html')
#             break
#
#         elif level == 3 and odds > number_sec_day and user_id == message.from_user.id:
#             flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
#                                                                                          transcription, bot,
#                                                                                          number, message, level,
#                                                                                          time_now)
#             Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_week)
#             # await asyncio.sleep(number_sec_week)  # Asynchronous delay
#             # await bot.send_message(message.chat.id, '–ù–∞—Å—Ç–∞–≤ —á–∞—Å —Ç–∏—Å–Ω—É—Ç–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>', parse_mode='html')
#             break
#
#         elif level == 4 and odds > number_sec_week and user_id == message.from_user.id:
#             flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
#                                                                                          transcription, bot,
#                                                                                          number, message, level,
#                                                                                          time_now)
#             Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_month)
#             # await asyncio.sleep(number_sec_month)  # Asynchronous delay
#             # await bot.send_message(message.chat.id, '–ù–∞—Å—Ç–∞–≤ —á–∞—Å —Ç–∏—Å–Ω—É—Ç–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>', parse_mode='html')
#             break
#
#         elif level == 5 and odds > number_sec_month and user_id == message.from_user.id:
#             flag, text_for_callmessage, number_row = await Functions.Functions.send_word(ua_word, eng_word,
#                                                                                          transcription, bot,
#                                                                                          number, message, level,
#                                                                                          time_now)
#             Functions.DB.update_one_value(word_id, 'check_date', time_now + number_sec_month)
#             # await asyncio.sleep(number_sec_month)  # Asynchronous delay
#             # await bot.send_message(message.chat.id, '–ù–∞—Å—Ç–∞–≤ —á–∞—Å —Ç–∏—Å–Ω—É—Ç–∏ <b>"–ü—Ä–∏–≤–µ–¥–∏ —Å—é–¥–∏ —Å–ª–æ–≤–æ"</b>', parse_mode='html')
#             break
#
#     if flag == False:
#         await bot.send_message(message.chat.id,
#                                '–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞ —Å–ª—ñ–≤, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ —Ç–æ–±–æ—é. –ü—Ä–∏—Ö–æ–¥—å –ø—ñ–∑–Ω—ñ—à–µ.')
#         sti = open(f'stickers/AnimatedSticker_gorilla.tgs', 'rb')
#         await bot.send_sticker(message.chat.id, sti)
